import pandas as pd
import os
def print_df(header, df):
    print()
    print()
    print(header)
    for i, row in df.iterrows():
        print(f"üè† {row['–ê–¥—Ä–µ—Å']} | {row["–ü–ª–æ—â–∞–¥—å"]} –º¬≤ | "
        f"{row['–¶–µ–Ω–∞_—á–∏—Å–ª–æ']:,.0f} ‚ÇΩ | "
        f"{row['–¶–µ–Ω–∞_–∑–∞_–º2']:,.0f} ‚ÇΩ/–º¬≤ | –ñ–ö: {row['–ù–∞–∑–≤–∞–Ω–∏–µ –ñ–ö']} | –ú–µ—Ç—Ä–æ: {row['–ú–µ—Ç—Ä–æ']}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º CSV
df = pd.read_csv("—Ü–∏–∞–Ω.csv", sep=";")  # –£–∫–∞–∂–∏ sep, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
# –£–¥–∞–ª—è–µ–º –Ω–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
df = df.drop(columns=["–û–ø–∏—Å–∞–Ω–∏–µ", '–õ–∏—Ñ—Ç'])
df.to_csv("cian_clear.csv", index=False, sep=";")
# –í–∑—è–ª–∏ –Ω–æ–≤—ã–π –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
df = pd.read_csv("cian_clear.csv", sep=";")

df.columns = df.columns.str.strip()        # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
df.columns = df.columns.str.replace('\n', '')  # —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
# –†–∞—Å–ø–µ—á–∞—Ç–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
# print(df.info()) 
# –†–∞—Å–ø–µ—á–∞—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
# print(df.head())


#                  –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ

# print(f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ = {len(df)}')  


#                   –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∏ –º–µ–¥–∏–∞–Ω–Ω—É—é —Ü–µ–Ω—É

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å —Ü–µ–Ω–æ–π int
df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"] = df["–¶–µ–Ω–∞"].apply(lambda x: int(x.split()[0]))
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
average_price = df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"].mean()
print(f"‚úÖ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {average_price:,.0f} ‚ÇΩ")
median_price = df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"].median()
print(f"‚úÖ –ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {median_price:,.0f} ‚ÇΩ")


#               –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å –ø–ª–æ—â–∞–¥—å—é float
df["–ü–ª–æ—â–∞–¥—å"] = df["–ü–ª–æ—â–∞–¥—å, –º2"].apply(lambda x: float(x.split('/')[0]))
# 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
min_row = df[df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"] == df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"].min()].iloc[0]
# 2. –î–æ—Å—Ç–∞—ë–º –∏–∑ –Ω–µ—ë –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
min_price = min_row["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"]
area = min_row["–ü–ª–æ—â–∞–¥—å"]
zhk = min_row["–ù–∞–∑–≤–∞–Ω–∏–µ –ñ–ö"]
metro = min_row["–ú–µ—Ç—Ä–æ"]
# 3. –í—ã–≤–æ–¥–∏–º –≤—Å—ë –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
print(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price:,.0f} ‚ÇΩ –∑–∞ {area} –º¬≤ –≤ –ñ–ö ¬´{zhk}¬ª, –º–µ—Ç—Ä–æ {metro}")

# 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
max_row = df[df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"] == df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"].max()].iloc[0]
# 2. –î–æ—Å—Ç–∞—ë–º –∏–∑ –Ω–µ—ë –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
max_price = max_row["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"]
area = max_row["–ü–ª–æ—â–∞–¥—å"]
zhk = max_row["–ù–∞–∑–≤–∞–Ω–∏–µ –ñ–ö"]
metro = max_row["–ú–µ—Ç—Ä–æ"]
# 3. –í—ã–≤–æ–¥–∏–º –≤—Å—ë –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_price:,.0f} ‚ÇΩ –∑–∞ {area} –º¬≤ –≤ –ñ–ö ¬´{zhk}¬ª, –º–µ—Ç—Ä–æ {metro}")


#               –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞
# 1. –°—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –∑–∞ –º¬≤
df["–¶–µ–Ω–∞_–∑–∞_–º2"] = df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"] / df["–ü–ª–æ—â–∞–¥—å"]
# 2. –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –º¬≤
avg_price_per_m2 = df["–¶–µ–Ω–∞_–∑–∞_–º2"].mean()
# 3. –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º
print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä: {avg_price_per_m2:,.0f} ‚ÇΩ/–º¬≤")
print()

#                      –í—ã–≤–æ–¥–∏–º –¢–û–ü-5 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö
# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã –∑–∞ –º¬≤
cheapest_per_m2 = df.sort_values(by="–¶–µ–Ω–∞_–∑–∞_–º2").head(5)
# –í—ã–≤–æ–¥–∏–º
print_df('üí∞ –¢–û–ü —Å–∞–º—ã—Ö –î–ï–®–ï–í–´–• –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ –∑–∞ –º¬≤', cheapest_per_m2)


#                      –í—ã–≤–æ–¥–∏–º –¢–û–ü-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö
# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã –∑–∞ –º¬≤
most_expensive_per_m2 = df.sort_values(by="–¶–µ–Ω–∞_–∑–∞_–º2", ascending=False).head(5)
# –í—ã–≤–æ–¥–∏–º
print_df('üí∞ –¢–û–ü —Å–∞–º—ã—Ö –î–û–†–û–ì–ò–• –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ –∑–∞ –º¬≤', cheapest_per_m2)

    
#                   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —É—Å–ª–æ–≤–∏—è–º:
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
filtered_df = df[
    (df["–¢–∏–ø"] == "–ü—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ") &
    (df["–¶–µ–Ω–∞_—á–∏—Å–ª–æ"] <= 20_000_000) &
    (df["–ü–ª–æ—â–∞–¥—å"] >= 40) &
    (df["–ü–ª–æ—â–∞–¥—å"] <= 100)
]
print()
print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(filtered_df)}")
print_df('üìä –í–û–¢ –°–ü–ò–°–û–ö: ', filtered_df)


# –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä —Ä—è–¥–æ–º —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π –≤–æ–¥–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω
vodny_count = filtered_df[filtered_df["–ú–µ—Ç—Ä–æ"].str.contains("–º. –í–æ–¥–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω", case=False)].shape[0]
print()
print(f"üöá –ö–≤–∞—Ä—Ç–∏—Ä —É –º–µ—Ç—Ä–æ ¬´–º. –í–æ–¥–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω¬ª: {vodny_count}")

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
metro_counts = df["–ú–µ—Ç—Ä–æ"].value_counts()

# –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤–æ
print()
print("üöá –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ:\n")
for metro, count in metro_counts.items():
    print(f"–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {metro} ‚Äî {count} –∫–≤–∞—Ä—Ç–∏—Ä")


# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –º¬≤
metro_avg_price_per_m2 = (
    df.groupby("–ú–µ—Ç—Ä–æ")["–¶–µ–Ω–∞_–∑–∞_–º2"]
    .mean()
    .sort_values(ascending=False)
    .head(10)
)

# –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
print("\n\nüí∏ –¢–û–ü-10 —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –∑–∞ –º¬≤:\n")
for metro, avg_m2_price in metro_avg_price_per_m2.items():
    print(f"{metro:<45} ‚Äî {avg_m2_price:,.0f} ‚ÇΩ/–º¬≤")